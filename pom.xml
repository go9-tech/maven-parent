<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.3</version>
	</parent>

	<groupId>tech.go9</groupId>
	<artifactId>maven-parent</artifactId>
	<version>0.1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>Maven Parent</name>
	<description>Maven Parent</description>
	<inceptionYear>2023</inceptionYear>
	<url>https://https://bitbucket.org/go9tech/maven-parent</url>

	<organization>
		<name>go9</name>
		<url>https://www.go9.tech</url>
	</organization>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Thiago Assis</name>
			<email>thiago.assis@go9.tech</email>
			<organization>go9</organization>
			<organizationUrl>http://www.go9.tech</organizationUrl>
		</developer>
	</developers>

	<scm>
		<url>https://bitbucket.org/go9tech/maven-parent</url>
		<connection>scm:git:https://bitbucket.org/go9tech/maven-parent.git</connection>
		<developerConnection>scm:git:https://bitbucket.org/go9tech/maven-parent.git</developerConnection>
	</scm>

	<modules>
		<module>maven-parent-license</module>
	</modules>

	<properties>

		<!-- project properties -->
		<java.version>19</java.version>

		<!-- pipeline properties -->
		<!-- pipeline.type>lib</pipeline.type -->
		<pipeline.size>small</pipeline.size>
		<pipeline.version>v1</pipeline.version>

		<!-- docker-maven-plugin properties -->
		<docker-maven-plugin.version>0.42.0</docker-maven-plugin.version>

		<!-- hibernate-enhance-maven-plugin properties -->
		<hibernate-enhance-maven-plugin.enableLazyInitialization>false</hibernate-enhance-maven-plugin.enableLazyInitialization>
		<hibernate-enhance-maven-plugin.enableDirtyTracking>true</hibernate-enhance-maven-plugin.enableDirtyTracking>
		<hibernate-enhance-maven-plugin.enableAssociationManagement>true</hibernate-enhance-maven-plugin.enableAssociationManagement>
		<hibernate-enhance-maven-plugin.enableExtendedEnhancement>false</hibernate-enhance-maven-plugin.enableExtendedEnhancement>

		<!-- license-maven-plugin properties -->
		<license-maven-plugin.skip>false</license-maven-plugin.skip>

		<!-- jacoco-maven-plugin -->
		<jacoco-maven-plugin.skip>false</jacoco-maven-plugin.skip>
		<jacoco-maven-plugin.minimunBundleClassCoveredRatio>0.01</jacoco-maven-plugin.minimunBundleClassCoveredRatio>
		<jacoco-maven-plugin.minimunBundleMethodCoveredRatio>0.01</jacoco-maven-plugin.minimunBundleMethodCoveredRatio>
		<jacoco-maven-plugin.minimunBundleBranchCoveredRatio>0.01</jacoco-maven-plugin.minimunBundleBranchCoveredRatio>
		<jacoco-maven-plugin.minimunBundleLineCoveredRatio>0.01</jacoco-maven-plugin.minimunBundleLineCoveredRatio>
		<jacoco-maven-plugin.maximumClassComplexityTotalCount>1000</jacoco-maven-plugin.maximumClassComplexityTotalCount>

		<!-- maven-assembly-plugin properties -->
		<maven-assembly-plugin.appendAssemblyId>false</maven-assembly-plugin.appendAssemblyId>

		<!-- maven-checkstyle-plugin -->
		<maven-checkstyle-plugin.skip>false</maven-checkstyle-plugin.skip>

		<!-- maven-gpg-plugin -->
		<maven-gpg-plugin.skip>true</maven-gpg-plugin.skip>
		<maven-gpg-plugin.passphrase>${env.GPG_PASSPHRASE}</maven-gpg-plugin.passphrase>

		<!-- maven-javadoc-plugin properties -->
		<maven-javadoc-plugin.skip>false</maven-javadoc-plugin.skip>

		<!-- snyk-maven-plugin.version -->
		<snyk-maven-plugin.skip>true</snyk-maven-plugin.skip>
		<snyk-maven-plugin.apiToken>${env.SNYK_API_TOKEN}</snyk-maven-plugin.apiToken>
		<snyk-maven-plugin.org>go9tech</snyk-maven-plugin.org>
		<snyk-maven-plugin.severityThreshold>medium</snyk-maven-plugin.severityThreshold>
		<snyk-maven-plugin.failOnIssues>true</snyk-maven-plugin.failOnIssues>
		<snyk-maven-plugin.updatePolicy>daily</snyk-maven-plugin.updatePolicy>

		<!-- sonar-maven-plugin properties -->
		<sonar-maven-plugin.skip>true</sonar-maven-plugin.skip>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<sonar.login>${env.SONAR_LOGIN}</sonar.login>
		<sonar.organization>go9tech</sonar.organization>
		<sonar.projectKey>${project.groupId}_${project.artifactId}</sonar.projectKey>
		<!-- sonar.scm.disabled>true</sonar.scm.disabled -->
		<!-- sonar.scm.provider>git</sonar.scm.provider -->
		<!-- sonar.branch.name>develop</sonar.branch.name -->
		<!-- sonar.pullrequest.provider>bitbucket</sonar.pullrequest.provider -->
		<!-- sonar.branch.longLivedBranches.regex></sonar.branch.longLivedBranches.regex -->

		<!-- spring-javaformat-maven-plugin -->
		<spring-javaformat-maven-plugin.skip>false</spring-javaformat-maven-plugin.skip>

		<!-- dependencies versions -->
		<checkstyle.version>10.6.0</checkstyle.version>
		<spring-javaformat.version>0.0.35</spring-javaformat.version>

		<!-- plugins versions -->
		<apt-maven-plugin.version>1.1.3</apt-maven-plugin.version>
		<buildplan-maven-plugin.version>2.2.1</buildplan-maven-plugin.version>
		<copy-rename-maven-plugin.version>1.0.1</copy-rename-maven-plugin.version>
		<license-maven-plugin.version>4.2.rc3</license-maven-plugin.version>
		<exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
		<git-commit-id-plugin.version>5.0.0</git-commit-id-plugin.version>
		<groovy-maven-plugin.version>2.1.1</groovy-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.8</jacoco-maven-plugin.version>
		<maven-assembly-plugin.version>3.4.2</maven-assembly-plugin.version>
		<maven-checkstyle-plugin.version>3.2.0</maven-checkstyle-plugin.version>
		<maven-gpg-plugin.version>3.0.1</maven-gpg-plugin.version>
		<maven-surefire-plugin.version>3.0.0-M8</maven-surefire-plugin.version>
		<snyk-maven-plugin.version>2.2.0</snyk-maven-plugin.version>
		<sonar-maven-plugin.version>3.9.1.2184</sonar-maven-plugin.version>
		<spring-javaformat-maven-plugin.version>${spring-javaformat.version}</spring-javaformat-maven-plugin.version>
		<yaml-properties-maven-plugin.version>1.1.3</yaml-properties-maven-plugin.version>

		<!-- dependencies versions -->
		<guava.version>31.1-jre</guava.version>
		<maven-resources.version>0.1.0-SNAPSHOT</maven-resources.version>
		<persistence-api.version>2.2</persistence-api.version>
		<testcontainers.version>1.17.6</testcontainers.version>

	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>
			<dependency>
				<groupId>tech.go9</groupId>
				<artifactId>maven-resources</artifactId>
				<version>${maven-resources.version}</version>
				<classifier>bitbucket-pipelines-lib-small-v1</classifier>
				<type>yml</type>
			</dependency>
			<dependency>
				<groupId>tech.go9</groupId>
				<artifactId>maven-resources</artifactId>
				<version>${maven-resources.version}</version>
				<classifier>bitbucket-pipelines-service-small-v1</classifier>
				<type>yml</type>
			</dependency>
			<dependency>
				<groupId>tech.go9</groupId>
				<artifactId>maven-resources</artifactId>
				<version>${maven-resources.version}</version>
				<classifier>terragrunt</classifier>
				<type>hcl</type>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>testcontainers</artifactId>
				<version>${testcontainers.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>tech.go9</groupId>
			<artifactId>maven-resources</artifactId>
			<classifier>bitbucket-pipelines-lib-small-v1</classifier>
			<type>yml</type>
		</dependency>
		<dependency>
			<groupId>tech.go9</groupId>
			<artifactId>maven-resources</artifactId>
			<classifier>bitbucket-pipelines-service-small-v1</classifier>
			<type>yml</type>
		</dependency>
	</dependencies>

	<build>

		<resources>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*</include>
				</includes>
				<excludes>
					<exclude>**/*.cacerts</exclude>
					<exclude>**/*.cache</exclude>
					<exclude>**/*.db</exclude>
					<exclude>**/*.jar</exclude>
					<exclude>**/*.jks</exclude>
					<exclude>**/*.kar</exclude>
					<exclude>**/*.p12</exclude>
					<exclude>**/*.pfx</exclude>
					<exclude>**/*.xls</exclude>
					<exclude>**/*.xlsx</exclude>
					<exclude>**/*.xmi</exclude>
					<exclude>**/*.zip</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.cacerts</include>
					<include>**/*.cache</include>
					<include>**/*.db</include>
					<include>**/*.jar</include>
					<include>**/*.jks</include>
					<include>**/*.kar</include>
					<include>**/*.p12</include>
					<include>**/*.pfx</include>
					<include>**/*.xls</include>
					<include>**/*.xlsx</include>
					<include>**/*.xmi</include>
					<include>**/*.zip</include>
				</includes>
			</resource>
		</resources>

		<testResources>
			<testResource>
				<directory>${project.basedir}/src/test/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*</include>
				</includes>
				<excludes>
					<exclude>**/*.cacerts</exclude>
					<exclude>**/*.cache</exclude>
					<exclude>**/*.db</exclude>
					<exclude>**/*.jar</exclude>
					<exclude>**/*.jks</exclude>
					<exclude>**/*.kar</exclude>
					<exclude>**/*.p12</exclude>
					<exclude>**/*.pfx</exclude>
					<exclude>**/*.xls</exclude>
					<exclude>**/*.xlsx</exclude>
					<exclude>**/*.xmi</exclude>
					<exclude>**/*.zip</exclude>
				</excludes>
			</testResource>
			<testResource>
				<directory>${project.basedir}/src/test/resources</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.cacerts</include>
					<include>**/*.cache</include>
					<include>**/*.db</include>
					<include>**/*.jar</include>
					<include>**/*.jks</include>
					<include>**/*.kar</include>
					<include>**/*.p12</include>
					<include>**/*.pfx</include>
					<include>**/*.xls</include>
					<include>**/*.xlsx</include>
					<include>**/*.xmi</include>
					<include>**/*.zip</include>
				</includes>
			</testResource>
		</testResources>

		<pluginManagement>
			<plugins>

				<plugin>
					<groupId>com.mysema.maven</groupId>
					<artifactId>apt-maven-plugin</artifactId>
					<version>${apt-maven-plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>com.querydsl</groupId>
							<artifactId>querydsl-apt</artifactId>
							<version>${querydsl.version}</version>
							<classifier>jakarta</classifier>
						</dependency>
					</dependencies>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildplan-maven-plugin</artifactId>
					<version>${buildplan-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>com.coderplus.maven.plugins</groupId>
					<artifactId>copy-rename-maven-plugin</artifactId>
					<version>${copy-rename-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>${docker-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${exec-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>io.github.git-commit-id</groupId>
					<artifactId>git-commit-id-maven-plugin</artifactId>
					<version>${git-commit-id-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.gmaven</groupId>
					<artifactId>groovy-maven-plugin</artifactId>
					<version>${groovy-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<configuration>
						<skip>${jacoco-maven-plugin.skip}</skip>
					</configuration>
				</plugin>

				<plugin>
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>${license-maven-plugin.version}</version>
					<inherited>true</inherited>
					<dependencies>
						<dependency>
							<groupId>tech.go9</groupId>
							<artifactId>maven-parent-license</artifactId>
							<version>0.1.0-SNAPSHOT</version>
						</dependency>
					</dependencies>
					<configuration>
						<skip>${license-maven-plugin.skip}</skip>
						<header>default-license.txt</header>
						<properties>
							<year>${project.inceptionYear}</year>
							<owner>${project.organization.name}</owner>
							<email>${project.organization.url}</email>
						</properties>
						<mapping>
							<java>SLASHSTAR_STYLE</java>
						</mapping>
						<headerDefinitions>
							<headerDefinition>default-license-header-definition.xml</headerDefinition>
						</headerDefinitions>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven-assembly-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${maven-checkstyle-plugin.version}</version>
					<!-- inherited>true</inherited -->
					<dependencies>
						<dependency>
							<groupId>com.puppycrawl.tools</groupId>
							<artifactId>checkstyle</artifactId>
							<version>${checkstyle.version}</version>
						</dependency>
						<dependency>
							<groupId>io.spring.javaformat</groupId>
							<artifactId>spring-javaformat-checkstyle</artifactId>
							<version>${spring-javaformat.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<skip>${maven-checkstyle-plugin.skip}</skip>
						<configLocation>io/spring/javaformat/checkstyle/checkstyle.xml</configLocation>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>${maven-gpg-plugin.version}</version>
					<configuration>
						<skip>${maven-gpg-plugin.skip}</skip>
						<passphrase>${maven-gpg-plugin.passphrase}</passphrase>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>io.spring.javaformat</groupId>
					<artifactId>spring-javaformat-maven-plugin</artifactId>
					<version>${spring-javaformat-maven-plugin.version}</version>
					<inherited>true</inherited>
					<configuration>
						<skip>${spring-javaformat-maven-plugin.skip}</skip>
					</configuration>
				</plugin>

				<plugin>
					<groupId>io.snyk</groupId>
					<artifactId>snyk-maven-plugin</artifactId>
					<version>${snyk-maven-plugin.version}</version>
					<configuration>
						<skip>${snyk-maven-plugin.skip}</skip>
						<apiToken>${snyk-maven-plugin.apiToken}</apiToken>
						<failOnIssues>${snyk-maven-plugin.failOnIssues}</failOnIssues>
						<args>
							<arg>--all-projects</arg>
							<arg>--severity-threshold=${snyk-maven-plugin.severityThreshold}</arg>
							<arg>--org=${snyk-maven-plugin.org}</arg>
						</args>
						<cli>
							<updatePolicy>${snyk-maven-plugin.updatePolicy}</updatePolicy>
						</cli>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar-maven-plugin.version}</version>
					<configuration>
						<skip>${sonar-maven-plugin.skip}</skip>
					</configuration>
				</plugin>

				<plugin>
					<groupId>it.ozimov</groupId>
					<artifactId>yaml-properties-maven-plugin</artifactId>
					<version>${yaml-properties-maven-plugin.version}</version>
					<inherited>true</inherited>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>

			<plugin>
				<groupId>io.github.git-commit-id</groupId>
				<artifactId>git-commit-id-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>default</id>
						<phase>initialize</phase>
						<goals>
							<goal>revision</goal>
						</goals>
						<configuration>
							<skipPoms>false</skipPoms>
							<verbose>false</verbose>
							<failOnNoGitDirectory>false</failOnNoGitDirectory>
							<offline>true</offline>
							<replacementProperties>
								<replacementProperty>
									<property>git.branch</property>
									<propertyOutputSuffix>type</propertyOutputSuffix>
									<token>^([^\/]*)\/([^\/]*)$</token>
									<value>$1</value>
									<regex>true</regex>
								</replacementProperty>
							</replacementProperties>
							<generateGitPropertiesFile>false</generateGitPropertiesFile>
							<generateGitPropertiesFilename>${project.build.directory}/git.properties</generateGitPropertiesFilename>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildplan-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>display-build-plan</id>
						<phase>validate</phase>
						<goals>
							<goal>list</goal>
						</goals>
						<configuration />
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.gmaven</groupId>
				<artifactId>groovy-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>set-maven-flags</id>
						<phase>validate</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>
								log.info('Base dir: ' + project.basedir)
								isModule = new File(project.basedir, "../pom.xml").exists()
								isParent = !isModule
								properties['project.isParent'] = isParent
								project.properties.setProperty('project.isParent', isParent ? 'true' : 'false')
								log.info('Parent: ' + isParent)
								properties['project.isModule'] = isModule
								project.properties.setProperty('project.isModule', isModule ? 'true' : 'false')
								log.info('Module: ' + isModule)
							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<executions>
					<execution>
						<id>sign-artifacts</id>
						<phase>verify</phase>
						<goals>
							<goal>sign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>

	</build>

	<profiles>

		<profile>
			<id>bitbucket-pipelines</id>
			<activation>
				<file>
					<missing>bitbucket-pipelines.yml</missing>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.gmaven</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>set-pipeline-type</id>
								<phase>validate</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
										propertyKey = 'pipeline.type'
										propertyValue = properties[propertyKey]
										if (propertyValue == null) {
											isService = new File(project.basedir, project.artifactId + "-chart").exists() || new File(project.basedir, project.artifactId + "-stack").exists()
											if (isService) {
												propertyValue = "service";
											} else {
												propertyValue = "lib";
											}
											properties[propertyKey] = propertyValue
											project.properties.setProperty(propertyKey, propertyValue)
										}
										log.info('Pipeline type: ' + propertyValue)
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>download-bitbucket-pipelines.yml</id>
								<phase>initialize</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<skip>${project.isModule}</skip>
									<outputDirectory>${project.basedir}</outputDirectory>
									<overWriteSnapshots>true</overWriteSnapshots>
									<overWriteReleases>true</overWriteReleases>
									<overWriteIfNewer>true</overWriteIfNewer>
									<includeGroupIds>tech.go9</includeGroupIds>
									<includeArtifactIds>maven-resources</includeArtifactIds>
									<classifier>bitbucket-pipelines-${pipeline.type}-${pipeline.size}-${pipeline.version}</classifier>
									<stripVersion>true</stripVersion>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.gmaven</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>move-bitbucket-pipelines.yml</id>
								<phase>initialize</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
										if (properties['project.isParent'] == 'true') {
											java.nio.file.Files.move(java.nio.file.Paths.get(project.basedir.toPath().toString(), "maven-resources-bitbucket-pipelines-${pipeline.type}-${pipeline.size}-${pipeline.version}.yml"),
												java.nio.file.Paths.get(project.basedir.toPath().toString(), "bitbucket-pipelines.yml"),
												java.nio.file.StandardCopyOption.REPLACE_EXISTING);
										}
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>java</id>
			<activation>
				<file>
					<exists>src/main/java</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.mycila</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-java-licence-header</id>
								<phase>process-sources</phase>
								<goals>
									<goal>format</goal>
								</goals>
								<configuration>
									<includes>
										<include>src/main/java/**/*.java</include>
									</includes>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.spring.javaformat</groupId>
						<artifactId>spring-javaformat-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>format-sources</id>
								<phase>process-sources</phase>
								<goals>
									<goal>apply</goal>
								</goals>
							</execution>
							<execution>
								<id>format-validation</id>
								<phase>process-sources</phase>
								<goals>
									<goal>validate</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<executions>
							<execution>
								<id>checkstyle-validation</id>
								<phase>process-sources</phase>
								<goals>
									<goal>check</goal>
								</goals>
								<!-- inherited>true</inherited -->
								<configuration>
									<sourceDirectories>
										<sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
									</sourceDirectories>
									<testSourceDirectories></testSourceDirectories>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<!-- do not modify this id https://maven.apache.org/ref/3.0.4/maven-model-builder/super-pom.html -->
								<id>attach-sources</id>
								<goals>
									<goal>jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<configuration>
							<skip>${maven-javadoc-plugin.skip}</skip>
							<sourceFileExcludes>
								<sourceFileExclude>${project.build.directory}/**</sourceFileExclude>
							</sourceFileExcludes>
						</configuration>
						<executions>
							<execution>
								<!-- do not modify this id https://maven.apache.org/ref/3.0.4/maven-model-builder/super-pom.html -->
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>java-test</id>
			<activation>
				<file>
					<exists>src/test/java</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.mycila</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-java-test-licence-header</id>
								<phase>process-test-sources</phase>
								<goals>
									<goal>format</goal>
								</goals>
								<configuration>
									<includes>
										<include>src/test/java/**/*.java</include>
									</includes>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<executions>
							<execution>
								<id>checkstyle-validation</id>
								<phase>process-sources</phase>
								<goals>
									<goal>check</goal>
								</goals>
								<!-- inherited>true</inherited -->
								<configuration>
									<sourceDirectories></sourceDirectories>
									<testSourceDirectories>
										<testSourceDirectory>${project.basedir}/src/test/java</testSourceDirectory>
									</testSourceDirectories>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${maven-surefire-plugin.version}</version>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<executions>
							<execution>
								<id>test-jar</id>
								<goals>
									<goal>test-jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>java-19</id>
			<activation>
				<jdk>19</jdk>
			</activation>
			<properties>
				<java.version>19</java.version>
				<javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
			</properties>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-compiler-plugin</artifactId>
							<configuration>
								<release>${java.version}</release>
								<annotationProcessorPaths>
									<path>
										<groupId>org.projectlombok</groupId>
										<artifactId>lombok</artifactId>
										<version>${lombok.version}</version>
									</path>
								</annotationProcessorPaths>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
			<id>hibernate</id>
			<activation>
				<file>
					<exists>src/main/resources/META-INF/maven/profiles/hibernate</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.hibernate.orm.tooling</groupId>
						<artifactId>hibernate-enhance-maven-plugin</artifactId>
						<version>${hibernate.version}</version>
						<executions>
							<execution>
								<id>enhance-hibernate-entities</id>
								<phase>compile</phase>
								<goals>
									<goal>enhance</goal>
								</goals>
								<configuration>
									<enableLazyInitialization>${hibernate-enhance-maven-plugin.enableLazyInitialization}</enableLazyInitialization>
									<enableDirtyTracking>${hibernate-enhance-maven-plugin.enableDirtyTracking}</enableDirtyTracking>
									<enableAssociationManagement>${hibernate-enhance-maven-plugin.enableAssociationManagement}</enableAssociationManagement>
									<enableExtendedEnhancement>${hibernate-enhance-maven-plugin.enableExtendedEnhancement}</enableExtendedEnhancement>
									<failOnError>true</failOnError>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>hibernate-test</id>
			<activation>
				<file>
					<exists>src/test/resources/META-INF/maven/profiles/hibernate</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.hibernate.orm.tooling</groupId>
						<artifactId>hibernate-enhance-maven-plugin</artifactId>
						<version>${hibernate.version}</version>
						<executions>
							<execution>
								<id>enhance-hibernate-test-entities</id>
								<phase>test-compile</phase>
								<goals>
									<goal>enhance</goal>
								</goals>
								<configuration>
									<enableLazyInitialization>${hibernate-enhance-maven-plugin.enableLazyInitialization}</enableLazyInitialization>
									<enableDirtyTracking>${hibernate-enhance-maven-plugin.enableDirtyTracking}</enableDirtyTracking>
									<enableAssociationManagement>${hibernate-enhance-maven-plugin.enableAssociationManagement}</enableAssociationManagement>
									<enableExtendedEnhancement>${hibernate-enhance-maven-plugin.enableExtendedEnhancement}</enableExtendedEnhancement>
									<failOnError>true</failOnError>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>querydsl</id>
			<activation>
				<file>
					<exists>src/main/resources/META-INF/maven/profiles/querydsl</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-querydsl-sources</id>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>target/generated-sources/querydsl</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.mysema.maven</groupId>
						<artifactId>apt-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>generte-querydsl-sources</id>
								<goals>
									<goal>process</goal>
								</goals>
								<configuration>
									<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
									<outputDirectory>target/generated-sources/querydsl</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>querydsl-test</id>
			<activation>
				<file>
					<exists>src/test/resources/META-INF/maven/profiles/querydsl</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-querydsl-test-sources</id>
								<phase>process-test-sources</phase>
								<goals>
									<goal>add-test-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>target/generated-test-sources/querydsl</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.mysema.maven</groupId>
						<artifactId>apt-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-querydsl-test-sources</id>
								<!-- phase>process-test-sources</phase -->
								<goals>
									<goal>test-process</goal>
								</goals>
								<configuration>
									<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
									<outputDirectory>target/generated-test-sources/querydsl</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>jacoco</id>
			<activation>
				<property>
					<name>!skipJacoco</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-agent</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
							<execution>
								<id>check</id>
								<goals>
									<goal>check</goal>
								</goals>
								<configuration>
									<rules>
										<rule>
											<element>BUNDLE</element>
											<limits>
												<limit>
													<counter>CLASS</counter>
													<value>COVEREDRATIO</value>
													<minimum>${jacoco-maven-plugin.minimunBundleClassCoveredRatio}</minimum>
												</limit>
												<limit>
													<counter>METHOD</counter>
													<value>COVEREDRATIO</value>
													<minimum>${jacoco-maven-plugin.minimunBundleMethodCoveredRatio}</minimum>
												</limit>
												<limit>
													<counter>BRANCH</counter>
													<value>COVEREDRATIO</value>
													<minimum>${jacoco-maven-plugin.minimunBundleBranchCoveredRatio}</minimum>
												</limit>
												<limit>
													<counter>LINE</counter>
													<value>COVEREDRATIO</value>
													<minimum>${jacoco-maven-plugin.minimunBundleLineCoveredRatio}</minimum>
												</limit>
											</limits>
										</rule>
										<rule>
											<element>CLASS</element>
											<limits>
												<limit>
													<counter>COMPLEXITY</counter>
													<value>TOTALCOUNT</value>
													<maximum>${jacoco-maven-plugin.maximumClassComplexityTotalCount}</maximum>
												</limit>
											</limits>
										</rule>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker</id>
			<activation>
				<file>
					<exists>src/main/resources/Dockerfile</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-dockerfile-build</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>${project.basedir}/src/main/resources</directory>
											<includes>
												<include>Dockerfile</include>
												<include>entrypoint.sh</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
									<outputDirectory>${docker-maven-plugin.dockerFileDir}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<configuration>
							<skip>${docker-maven-plugin.skip}</skip>
							<verbose>true</verbose>
							<images>
								<image>
									<registry>${docker-maven-plugin.imageRegistry}</registry>
									<name>${docker-maven-plugin.imageName}</name>
									<build>
										<contextDir>${docker-maven-plugin.contextDir}</contextDir>
										<dockerFile>${docker-maven-plugin.dockerFile}</dockerFile>
									</build>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>build</id>
								<phase>install</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>deploy</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>helm</id>
			<activation>
				<file>
					<exists>src/main/helm</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>process-helm-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>${project.basedir}/src/main/helm</directory>
											<includes>
												<include>**/*</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>helm-package</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>${project.build.directory}</workingDirectory>
									<executable>helm</executable>
									<arguments>
										<argument>package</argument>
										<argument>.</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-helm-resources</id>
								<phase>validate</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${project.basedir}/src/main/helm</source>
									</sources>
								</configuration>
							</execution>
							<execution>
								<id>attach-helm-artifacts</id>
								<phase>package</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${project.build.directory}/${project.parent.artifactId}-${project.version}.tgz</file>
											<classifier>chart</classifier>
											<type>tgz</type>
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>terragrunt</id>
			<activation>
				<file>
					<exists>src/main/terraform/main.tf</exists>
				</file>
			</activation>
			<dependencies>
				<dependency>
					<groupId>tech.go9</groupId>
					<artifactId>maven-resources</artifactId>
					<classifier>terragrunt</classifier>
					<type>hcl</type>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>download-terragrunt.hcl</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<overWriteSnapshots>true</overWriteSnapshots>
									<overWriteReleases>true</overWriteReleases>
									<overWriteIfNewer>true</overWriteIfNewer>
									<includeGroupIds>tech.go9</includeGroupIds>
									<includeArtifactIds>maven-resources</includeArtifactIds>
									<classifier>terragrunt</classifier>
									<stripVersion>true</stripVersion>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.coderplus.maven.plugins</groupId>
						<artifactId>copy-rename-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>rename-terragrunt.hcl</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>rename</goal>
								</goals>
								<configuration>
									<sourceFile>${project.build.directory}/maven-resources-terragrunt.hcl</sourceFile>
									<destinationFile>${project.build.directory}/.terragrunt/terragrunt.hcl</destinationFile>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>replace-terragrunt.hcl-maven-properties</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>${project.build.directory}/.terragrunt</directory>
											<includes>
												<include>terragrunt.hcl</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>terraform</id>
			<activation>
				<file>
					<exists>src/main/terraform</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-terragrunt-main-sources</id>
								<phase>validate</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>src/main/terraform</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-terraform-files-to-target</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>${project.basedir}/src/main/terraform</directory>
											<includes>
												<include>**/*.json</include>
												<include>**/*.tf</include>
												<include>**/*.tpl</include>
												<include>**/*.hcl</include>
												<include>**/*.sh</include>
												<include>**/*.tfvar</include>
												<include>**/*.yaml</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>init-terraform</id>
								<phase>process-resources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>${project.build.directory}</workingDirectory>
									<executable>terragrunt</executable>
									<arguments>
										<argument>init</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>validate-terraform</id>
								<phase>compile</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>${project.build.directory}</workingDirectory>
									<executable>terragrunt</executable>
									<arguments>
										<argument>validate</argument>
									</arguments>
								</configuration>
							</execution>
							<!-- removed :( when depends from others works pace not works -->
							<!-- execution>
								<id>plan-terraform</id>
								<phase>compile</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>${project.build.directory}</workingDirectory>
									<executable>terragrunt</executable>
									<arguments>
										<argument>plan</argument>
									</arguments>
								</configuration>
							</execution -->
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>assembly</id>
			<activation>
				<file>
					<exists>src/assembly/default.xml</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<appendAssemblyId>${maven-assembly-plugin.appendAssemblyId}</appendAssemblyId>
									<descriptors>
										<descriptor>src/assembly/default.xml</descriptor>
									</descriptors>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>sonar</id>
			<activation>
				<property>
					<name>!skipSonar</name>
				</property>
			</activation>
			<!-- properties>
				<sonar.sources>.</sonar.sources>
				<sonar.inclusions>src/main/**</sonar.inclusions>
			</properties -->
			<build>
				<plugins>
					<!-- plugin>
						<groupId>org.codehaus.gmaven</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>set-sonar-branch-name</id>
								<phase>initialize</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
										sonarBranchName = properties['git.branch']
										properties['sonar.branch.name'] = sonarBranchName
										project.properties.setProperty('sonar.branch.name', sonarBranchName)
										log.info('Sonar branch name: ' + properties['sonar.branch.name'])
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin -->
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>sonar</id>
								<phase>verify</phase>
								<goals>
									<goal>sonar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>snyk</id>
			<activation>
				<property>
					<name>!skipSnyk</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.snyk</groupId>
						<artifactId>snyk-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>snyk-test</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
							</execution>
							<execution>
								<id>snyk-monitor</id>
								<goals>
									<goal>monitor</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

	<distributionManagement>
		<snapshotRepository>
			<id>maven-central-snapshot</id>
			<name>Maven Central Snapshot</name>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
		</snapshotRepository>
		<repository>
			<id>maven-central-release</id>
			<name>Maven Central Release</name>
			<url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

</project>
